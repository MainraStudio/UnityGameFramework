{"pages":[{"highlight":false,"header":"Window Overview","body":"Within the ScriptableObject Creator window, you will see a few text boxes and buttons.\r\n\r\nThese options are as listed below:\r\n\r\n• <color=#ffac00>Internal Name</color> •\nThis is the name of the internal class, used for referencing the objects in code once created\r\n\n• <color=#ffac00>Object Name</color> •\nThis is the default name of newly created versions of this type of ScriptableObject\r\n\n• <color=#ffac00>Default Name</color> •\nThis is the name of the item in the Project window’s right-click/Create menu\r\n\n• <color=#ffac00>Menu Name</color> •\nThis is the parent “folder” this object will be found in, inside the right-click/Create menu\r\n\n• <color=#ffac00>Add Variable</color> •\nThis button will add a new variable to the list, these are the types of data this ScriptableObject will be able to store\r\n\nThe final, saved ScriptableObject will be creatable using “Right-Click / Create / Menu Name / Default Name“, and will be named “Object Name” by default unless renamed, and can be referenced in scripts using “Internal Name“.\r\n\r\nPRO-TIP: additional layers within the Create menu can be achieved by adding “/” within your Menu Name or Default Name.\r\n\r\ne.g. A Default Name of “Magic/Fire/Basic” would be found in “Right-Click / Create / Menu Name / Magic / Fire / Basic”.\n\n[Image path=\"..\\SOC_1.png\"]"},{"highlight":false,"header":"Setting Up Variables","body":"Depending on your use case (such as what the ScriptableObject is going to be used for), you will want to add different variables, and a different number of them to this list.\r\n\r\nYou can click on the “Add Variable” button to begin with your first variable, and to add additional variable items to the list.\r\n\r\nOnce created, these items can be reordered, or deleted, using the icon buttons on the rightmost edge of the variable list item.\n\n[Image path=\"..\\SOC_2.png\"]\n\nSimply give the variable a name (not including spaces or special characters), and select a type.\r\n\r\nCurrently, ScriptableObject supports the following types:\r\n\r\n• <color=#ffac00>String</color> – Stores developer-definable text, such as an item name\r\n• <color=#ffac00>Bool</color> – A boolean (toggle, on/off, 1/0), such as whether an item can be sold\r\n• <color=#ffac00>Int</color> – A whole-number value, such as an item weight or price\r\n• <color=#ffac00>Float</color> – A decimal-supporting numerical value, such as an item name or price\r\n• <color=#ffac00>Vector2</color> – A set of 2 floats, stored as an X and Y value\r\n• <color=#ffac00>Vector3</color> – A set of 3 floats, stored as an X, Y and Z value\r\n• <color=#ffac00>GameObject</color> – A Unity GameObject, useful for associating a prefab with the item for instantiation\r\n• <color=#ffac00>Custom Type</color> – Allows the developer to create a reference to a script inheriting a custom type\n\n[Image path=\"..\\SOC_3.png\"]\n\n[Image path=\"..\\SOC_4.png\"]"},{"highlight":false,"header":"Saving your ScriptableObject","body":"To save your ScriptableObject, simply click the “Save” button in the top-right; an alert will be displayed informing you that the filename of the ScriptableObject MUST match the Internal Name, click OK and save the file in the desired location using the file dialog.\r"},{"highlight":false,"header":"Using your ScriptableObject ","body":"To create a ScriptableObject from the script generated by ScriptableObject Creator, right-click in your project view, and navigate to the Create path shown to you in the ScriptableObject Creator window, and click on the Default Name you chose.\r\n\r\nWe recommend you create a new folder to contain these objects, as having many of these in your Project window can become unmanageable rather quickly.\n\n[Image path=\"..\\SOC_5.png\"]\n\nThis will create a new object in the Project View, with it’s default object name matching the Object Name established in the ScriptableObject Creator window. This can be safely renamed if you wish.\r\n\r\n[Image path=\"..\\SOC_6.png\"]\n\nIn the Inspector window, you will now see an object whose variables match those you defined in the ScriptableObject Creator window, these can now be populated with data and saved. Referencing these objects in scripts (such as for inventory management) can be easily done by referring to the objects by the Internal Name chosen, this can also be seen in the disabled “Script” variable at the top of the object."}]}